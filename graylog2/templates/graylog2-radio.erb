# MANAGED BY PUPPET!
# The auto-generated node ID will be stored in this file and read after restarts. It is a good idea
# to use an absolute file path here if you are starting graylog2-radio from init scripts or similar.
<% if node_id_file and ! node_id_file.empty? -%>
node_id_file = <%= node_id_file %>
<% else -%>
node_id_file = /etc/graylog2-radio-node-id
<% end -%>

# REST URI of a Graylog2 server node this radio will register at.
<% if graylog2_server_uri and ! graylog2_server_uri.empty? -%>
graylog2_server_uri = <%= graylog2_server_uri %>
<% end -%>

# REST API listen URI. Must be reachable by the graylog2-web-interface and graylog2-server nodes.
<% if rest_listen_uri and ! rest_listen_uri.empty? -%>
rest_listen_uri = <%= rest_listen_uri %>
<% end -%>

# REST API transport address. Defaults to first non-loopback IPv4 system address and port 12900.
# This will be promoted to other nodes that have to connect to this node. (see rest_listen_uri)
<% if rest_transport_uri and ! rest_transport_uri.empty? -%>
rest_transport_uri = <%= rest_transport_uri %>
<% end -%>

# One or more Kafka brokers. Radio will automatically use all brokers in that Kafka cluster but
# needs at least one to connect to initially.
<% if kafka_brokers and ! kafka_brokers.empty? -%>
kafka_brokers = <%= kafka_brokers %>
<% end -%>

# Send messages asynchronously in a background thread? By setting the producer to async we allow
# batching messages (which is great for throughput) but open the possibility of a failure of the
# client machine dropping unsent data. Set to either sync or async.
<% kafka_producer_type and ! kafka_producer_type.empty? -%>
kafka_producer_type = <%= kafka_producer_type %>
<% end -%>

# Only accounted when running in async mode. The size of messages batches to send at once. See
# also the kafka_batch_max_wait_ms parameter.
<% if kafka_batch_size and ! kafka_batch_size.empty? -%>
kafka_batch_size = <%= kafka_batch_size %>
<% end -%>

# Fow how many milliseconds to wait to reach the kafka_batch_size. The batch is sent to the broker
# no matter if the kafka_batch_size is reached or not. Think of this like a timeout for local
# buffering before sending.
<% if kafka_batch_max_wait_ms and ! kafka_batch_max_wait_ms.empty? -%>
kafka_batch_max_wait_ms = <%= kafka_batch_max_wait_ms %>
<% end -%>

# How many Kafka brokers must ack a message to consider it delivered. Can be set to 0 for a
# fast fire and forget approach.
<% if kafka_required_acks and ! kafka_required_acks.empty? -%>
kafka_required_acks = <%= kafka_required_acks %>
<% end -%>

# The number of parallel running processors. Raise this number if your buffers are filling up.
<% if processbuffer_processors and ! processbuffer_processors.empty? -%>
processbuffer_processors = <%= processbuffer_processors %>
<% end -%>

# Wait strategy describing how buffer processors wait on a cursor sequence. (default: sleeping)
# Possible types:
#  - yielding
#     Compromise between performance and CPU usage.
#  - sleeping
#     Compromise between performance and CPU usage. Latency spikes can occur after quiet periods.
#  - blocking
#     High throughput, low latency, higher CPU usage.
#  - busy_spinning
#     Avoids syscalls which could introduce latency jitter. Best when threads can be bound to specific CPU cores.
<% if processor_wait_strategy and ! processor_wait_strategy.empty? -%>
processor_wait_strategy = <%= processor_wait_strategy %>
<% end -%>

# Size of internal ring buffers. Raise this if raising outputbuffer_processors does not help anymore.
# For optimum performance your LogMessage objects in the ring buffer should fit in your CPU L3 cache.
# Start server with --statistics flag to see buffer utilization.
# Must be a power of 2. (512, 1024, 2048, ...)
<% if ring_size and ! ring_size.empty? -%>
ring_size = <%= ring_size %>
<% end -%>
